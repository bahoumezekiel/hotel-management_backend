// migration.js - √Ä placer √† la racine de votre projet backend
const mongoose = require('mongoose');
require('dotenv').config(); // Pour charger les variables d'environnement

// Import du mod√®le Hotel
const Hotel = require('./models/Hotel');

async function migrateHotels() {
  try {
    console.log('üîÑ D√©but de la migration...');
    
    // Connexion √† MongoDB avec la m√™me URL que votre app
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb+srv://bahoumezekiel:L7RI7p7oBr0p90y2@cluster0.5ldppvs.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0', {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    console.log('‚úÖ Connect√© √† MongoDB');
    
    // V√©rifier combien d'h√¥tels n'ont pas le champ ville
    const hotelsWithoutVille = await Hotel.countDocuments({ ville: { $exists: false } });
    console.log(`üìä ${hotelsWithoutVille} h√¥tels sans le champ ville trouv√©s`);
    
    if (hotelsWithoutVille === 0) {
      console.log('‚úÖ Tous les h√¥tels ont d√©j√† le champ ville. Aucune migration n√©cessaire.');
      process.exit(0);
    }
    
    // Mettre √† jour tous les h√¥tels sans le champ ville
    const result = await Hotel.updateMany(
      { ville: { $exists: false } }, 
      { $set: { ville: 'Non renseign√©', updatedAt: new Date() } }
    );
    
    console.log(`‚úÖ Migration termin√©e : ${result.modifiedCount} h√¥tels mis √† jour`);
    
    // V√©rification finale
    const totalHotels = await Hotel.countDocuments();
    const hotelsWithVille = await Hotel.countDocuments({ ville: { $exists: true } });
    
    console.log(`üìà R√©sum√© final :`);
    console.log(`   - Total d'h√¥tels : ${totalHotels}`);
    console.log(`   - H√¥tels avec ville : ${hotelsWithVille}`);
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  }
}

// Ex√©cuter la migration
migrateHotels();